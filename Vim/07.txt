set nocompatible

so ~/.vim/plugins.vim


syntax enable
set background=dark
colorscheme gruvbox
filetype indent on
set smartindent 

" change leader from backslash to comma"
set backspace=indent,eol,start
let mapleader = ','
set number

set tabstop=2
set shiftwidth=2


" * Navigation "
" gg go to top of document "
" G to go to end of file "
" e to jump between words "
" $ to go to last character "
" 0 to go to first character " 
" zz on current line and it will show in the middle of screen, just more visibility "

" :vs - Vertical Split "
" :sp - Horizontal Split " 


" * Autocomplete "
" To autoplete words: viw, selects a entire word where the cursor is in before
" finds a space, vaw selects a word same as viw, but with first space after
" that word
" Same functionality for paragraphs, vip, and vap for entire paragraphs.

" for programming texts:
" vit selects inside a tag <p> This is a paragraph tag. </p>
" vat selects arround the tag <p> This is a paragraph tag. </p>
" vi( or vi) selects inner parentesis : main(String[] args)
" va( or va) selects arround  parentesis : main(String[] args)
" ci( change inside parentesis (change inside paranthesis)
" analogously for vi{, va{ ci{ 
" analogously for vi[, va[ ci[ 
" analogously for vi", va" ci" 




" * controls "
" u for undo last modification "
" U for undo all modifications before last save "


" *  searching in vim "
" To search some word you just press / and type your word enter, " 
" n to go to next ocurrence N to previous occurence "
" ggn to first match, Gn to last match "
" highlighting search matches "
set hlsearch

" incremental search "
set incsearch



" * copy lines "
" To copy one line just type y and to paste p on normal mode "
" In visual mode is also possible, V also copy a entire line "
" . just repeat last command " 


"-------- Mapings -------"
"imap map for insert mode"
"vmap map for visual mode"
"nmap map for normal mode"

"close my current tab"
nmap <Leader>w :tabc<cr>

" turn off highlight after use it "
nmap <Leader><space> :nohlsearch<cr>


"edit my vimrc in another tab <cr> = hit return"
nmap <Leader>ev :tabedit ~/.vimrc<cr> 


" -------- Ctrl P Mapings ------- "
" searshing for methods or variables inside a file code, just like a ctrl+f
nmap <Leader>f :CtrlPBufTag<cr>

" listing recent files "
nmap <Leader>r :CtrlPMRUFiles<cr>

" skiping files or directories with ctrlP "
let g:ctrlp_custom_ignore = 'node_modules\|git'
" means: place the math window on top, ordering top to bottom, at least 1
" result, at most, 20 matches, but always showing 20 result collumns 
let g:ctrlp_match_window = 'top:order:ttb,min:1,max:20,results:20'



"-------- Visual -------"

set t_CO=256

" Remove left, right bars even if the text goes down sight "
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R


"-------- Split Management -------"
" ctrl+j tp go to lower panel "
" nmap <C-J> <C-W><C-J> 


" ctrl+j tp go to above panel "
" nmap <C-K> <C-W><C-K> 


" ctrl+h tp go to left panel "
" nmap <C-H> <C-W><C-H> 


" ctrl+l tp go to right panel "
" nmap <C-L> <C-W><C-L> 


" as the monitor is samll, i never use horizontal split, so only map left and
" right panels toggles


nmap <C-J> <C-W><C-H> 
nmap <C-K> <C-W><C-L> 


set splitbelow
set splitright

"----- Make Nerdtree easer to toggle ----- "
nmap <Leader>1 :NERDTreeToggle<cr>




"--------Auto-commands -------"

" autocomands for formating nicely all html files
autocmd BufRead,BufWritePre *.html normal gg=G

" autocomands for comments in some specific type of files:

" comment one line in html with ,c My Leader key is , 
autocmd Filetype html nnoremap <Leader>c I<!--<esc>A--><esc>



augroup JavaScriptCmds

	" removing previous autocommands from another groups
	autocmd!
	" ,c to comment a line in javascript
	autocmd Filetype javascript nnoremap <Leader>c I//<esc>

augroup END


















"Automatically source vimrc file on save"

" Avoiding duplicate saving when type :w, super speed "
augroup autosourcing
	autocmd!
	autocmd BufWritePost .vimrc source %
augroup END 
